#version 300 es
#extension GL_OES_EGL_image_external : require
/*
   Copyright 2012 Harri Smatt

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

precision highp float;

uniform sampler2D sTexture;

in vec2 vTextureCoord;
out vec4 outcolor;

uniform vec2 uPixelSize;

uniform kern_array {

    float kern[4056];
};

/*buffer gabor_arrays {

    float gabor_vals[24];
};*/

const float KERNEL_WIDTH = 13.0;
const int KERNEL_SIZE = 169;

vec3 gabor(vec3 color, sampler2D tex, vec2 texturePos) {

	float dx = uPixelSize.x;
	float dy = uPixelSize.y;

	float x = texturePos.x;
	float y = texturePos.y;

	float product = 0.0;
	float i, j, k;
	int m, n;
	float offset = KERNEL_WIDTH / 2.0;
    vec4 pixel_rgb;

    int gray_index = 0;
    float gabor_vals[24];
    //gabor_vals[0] = 1.0;

    float gray_vals[KERNEL_SIZE];     //doesn't like dynamically sized arrays

    //1536x1952
    if(((x/dx) > 100.0) && ((y/dy) > 100.0) && ((x/dx) < 1510.0) && ((y/dy) < 1920.0)) {

        for(i = -offset; i <= offset; ++i) {
            for(j = -offset; j <= offset; ++j) {

                pixel_rgb = texture(tex, vec2(x + j*dx, y + i*dy));
                gray_vals[gray_index] = (pixel_rgb[0] + pixel_rgb[1] + pixel_rgb[2]) / 3.0;
                gray_index++;
                if((i == 0.0) && (j == 0.0))
                    gabor_vals[0] = gray_vals[gray_index];
            }
        }

        for(m = 0; m < 24; ++m) {
            for(n = 0; n < KERNEL_SIZE; ++n) {

                product = product + (gray_vals[n]* kern[n+m*KERNEL_SIZE])*255.0;

            }
            gabor_vals[m] = product;
            product = 0.0;
        }
    } else {
        gabor_vals[0] = 1.0;
    }

    //return vec3(0.5, 0.5, 0.5);
	return vec3(gabor_vals[0], gabor_vals[0], gabor_vals[0]);
	//return texture(tex, vec2(x, y)).rgb;    //for testing camera purposes
	//return color;
}

void main() {
	vec3 color = texture(sTexture, vTextureCoord).rgb;

	color = gabor(color, sTexture, vTextureCoord);

	// Calculate brightness, contrast and saturation.
	// color = brightness(color, uBrightness);
	// color = contrast(color, uContrast);
	// color = saturation(color, uSaturation);

	// Calculate darkened corners.
	//const float sqrt2 = 1.414213562373;
	//float len = distance(vTextureCoord, vec2(0.5)) * sqrt2;
	//len = smoothstep(1.0 - uCornerRadius, 1.0, len);
	//color *= mix(0.5, 1.0, 1.0 - len);
	outcolor = vec4(color, 1.0);
}
